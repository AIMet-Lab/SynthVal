import os
import logging
import time

import pandas
import synthval.metrics


def setup_logger(output_csv):
    """Set up a file logger that records results in a CSV file."""

    # Create a logger object named "FeatureMetricLogger"
    logger = logging.getLogger("FeatureMetricLogger")
    logger.setLevel(logging.INFO)  # Set the logging level to INFO

    # Check if the output CSV file already exists
    out_file_exist = os.path.exists(output_csv)

    # Create a FileHandler that writes log messages to the CSV file in append mode
    file_handler = logging.FileHandler(output_csv, mode='a+')
    file_handler.setLevel(logging.INFO)  # Log only INFO-level messages and above

    # Add the file handler to the logger
    logger.addHandler(file_handler)

    # If the CSV file did not exist before, write the header row
    if not out_file_exist:
        logger.info(f"REAL_DATA_ID,SYNTH_DATA_ID,FE_ID,METRIC,RESULT,TIME")

    # Return the configured logger object
    return logger


if __name__ == "__main__":
    # === Define paths and identifiers ===
    results_csv_path = "data/metrics/results.csv"  # Output CSV where metrics will be logged
    main_logger = setup_logger(results_csv_path)  # Initialize the logger for metrics results

    # Paths to the feature CSVs previously generated by feature extraction
    real_features_csv_path = "data/features/real_dinov2-small.csv"
    synth_features_csv_path = "data/features/synth_dinov2-small.csv"

    # Identifiers for logging purposes
    real_data_id = "real"  # Identifier for the real dataset
    synth_data_id = "synth"  # Identifier for the synthetic dataset
    fe_id = "dinov2-small"  # Feature extractor identifier
    metric_id = "FD"  # Metric identifier (Frechet Distance)

    # === Load features from CSV files ===
    # Each CSV likely contains one feature vector per row (no header, hence header=None)
    real_features_df = pandas.read_csv(real_features_csv_path, header=None)
    synth_features_df = pandas.read_csv(synth_features_csv_path, header=None)

    # === Compute the Frechet Distance metric ===
    start = time.perf_counter()  # Start timing the computation

    # Instantiate the FrechetDistance metric class from synthval.metrics
    # and compute the distance between the two feature distributions
    metric_value = synthval.metrics.FrechetDistance().calculate(
        real_features_df,
        synth_features_df
    )

    end = time.perf_counter()  # Stop timing the computation
    computation_time = end - start  # Compute total time elapsed

    # === Log the results ===
    # Write a CSV row with: dataset IDs, feature extractor ID, metric name, result value, and computation time
    main_logger.info(f"{real_data_id},{synth_data_id},{fe_id},{metric_id},{metric_value},{computation_time}")
